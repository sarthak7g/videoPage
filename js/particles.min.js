/* -----------------------------------------------
/* Author : Vincent Garreau  - vincentgarreau.com
/* MIT license: http://opensource.org/licenses/MIT
/* Demo / Generator : vincentgarreau.com/particles.js
/* GitHub : github.com/VincentGarreau/particles.js
/* How to use? : Check the GitHub README
/* v2.0.0
/* ----------------------------------------------- */
function hexToRgb(e) {
    var a = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    e = e.replace(a, function (e, a, t, i) {
        return a + a + t + t + i + i
    });
    var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
    return t ? {
        r: parseInt(t[1], 16),
        g: parseInt(t[2], 16),
        b: parseInt(t[3], 16)
    }
     : null
}
function clamp(e, a, t) {
    return Math.min(Math.max(e, a), t)
}
function isInArray(e, a) {
    return a.indexOf(e) > -1
}
var pJS = function (e, t) {
    var a = document.querySelector("#" + e + " > .particles-js-canvas-el");
    this.pJS = {
        canvas: {
            el: a,
            w: a.offsetWidth,
            h: a.offsetHeight
        },
        particles: {
            number: {
                value: 400,
                density: {
                    enable: !0,
                    value_area: 800
                }
            },
            color: {
                value: "#fff"
            },
            shape: {
                type: "circle",
                stroke: {
                    width: 0,
                    color: "#ff0000"
                },
                polygon: {
                    nb_sides: 5
                },
                image: {
                    src: "",
                    width: 100,
                    height: 100
                }
            },
            opacity: {
                value: 1,
                random: !1,
                anim: {
                    enable: !1,
                    speed: 2,
                    opacity_min: 0,
                    sync: !1
                }
            },
            size: {
                value: 20,
                random: !1,
                anim: {
                    enable: !1,
                    speed: 20,
                    size_min: 0,
                    sync: !1
                }
            },
            line_linked: {
                enable: !0,
                distance: 100,
                color: "#fff",
                opacity: 1,
                width: 1
            },
            move: {
                enable: !0,
                speed: 2,
                direction: "none",
                random: !1,
                straight: !1,
                out_mode: "out",
                bounce: !1,
                attract: {
                    enable: !1,
                    rotateX: 3e3,
                    rotateY: 3e3
                }
            },
            array: []
        },
        interactivity: {
            detect_on: "canvas",
            events: {
                onhover: {
                    enable: !0,
                    mode: "grab"
                },
                onclick: {
                    enable: !0,
                    mode: "push"
                },
                resize: !0
            },
            modes: {
                grab: {
                    distance: 100,
                    line_linked: {
                        opacity: 1
                    }
                },
                bubble: {
                    distance: 200,
                    size: 80,
                    duration: .4
                },
                repulse: {
                    distance: 200,
                    duration: .4
                },
                push: {
                    particles_nb: 4
                },
                remove: {
                    particles_nb: 2
                }
            },
            mouse: {}
        },
        retina_detect: !1,
        fn: {
            interact: {},
            modes: {},
            vendors: {}
        },
        tmp: {}
    };
    var u = this.pJS;
    t && Object.deepExtend(u, t),
    u.tmp.obj = {
        size_value: u.particles.size.value,
        size_anim_speed: u.particles.size.anim.speed,
        move_speed: u.particles.move.speed,
        line_linked_distance: u.particles.line_linked.distance,
        line_linked_width: u.particles.line_linked.width,
        mode_grab_distance: u.interactivity.modes.grab.distance,
        mode_bubble_distance: u.interactivity.modes.bubble.distance,
        mode_bubble_size: u.interactivity.modes.bubble.size,
        mode_repulse_distance: u.interactivity.modes.repulse.distance
    },
    u.fn.retinaInit = function () {
        u.retina_detect && 1 < window.devicePixelRatio ? (u.canvas.pxratio = window.devicePixelRatio, u.tmp.retina = !0) : (u.canvas.pxratio = 1, u.tmp.retina = !1),
        u.canvas.w = u.canvas.el.offsetWidth * u.canvas.pxratio,
        u.canvas.h = u.canvas.el.offsetHeight * u.canvas.pxratio,
        u.particles.size.value = u.tmp.obj.size_value * u.canvas.pxratio,
        u.particles.size.anim.speed = u.tmp.obj.size_anim_speed * u.canvas.pxratio,
        u.particles.move.speed = u.tmp.obj.move_speed * u.canvas.pxratio,
        u.particles.line_linked.distance = u.tmp.obj.line_linked_distance * u.canvas.pxratio,
        u.interactivity.modes.grab.distance = u.tmp.obj.mode_grab_distance * u.canvas.pxratio,
        u.interactivity.modes.bubble.distance = u.tmp.obj.mode_bubble_distance * u.canvas.pxratio,
        u.particles.line_linked.width = u.tmp.obj.line_linked_width * u.canvas.pxratio,
        u.interactivity.modes.bubble.size = u.tmp.obj.mode_bubble_size * u.canvas.pxratio,
        u.interactivity.modes.repulse.distance = u.tmp.obj.mode_repulse_distance * u.canvas.pxratio
    },
    u.fn.canvasInit = function () {
        u.canvas.ctx = u.canvas.el.getContext("2d")
    },
    u.fn.canvasSize = function () {
        u.canvas.el.width = u.canvas.w,
        u.canvas.el.height = u.canvas.h,
        u && u.interactivity.events.resize && window.addEventListener("resize", function () {
            u.canvas.w = u.canvas.el.offsetWidth,
            u.canvas.h = u.canvas.el.offsetHeight,
            u.tmp.retina && (u.canvas.w *= u.canvas.pxratio, u.canvas.h *= u.canvas.pxratio),
            u.canvas.el.width = u.canvas.w,
            u.canvas.el.height = u.canvas.h,
            u.particles.move.enable || (u.fn.particlesEmpty(), u.fn.particlesCreate(), u.fn.particlesDraw(), u.fn.vendors.densityAutoParticles()),
            u.fn.vendors.densityAutoParticles()
        })
    },
    u.fn.canvasPaint = function () {
        u.canvas.ctx.fillRect(0, 0, u.canvas.w, u.canvas.h)
    },
    u.fn.canvasClear = function () {
        u.canvas.ctx.clearRect(0, 0, u.canvas.w, u.canvas.h)
    },
    u.fn.particle = function (e, t, a) {
        if (this.radius = (u.particles.size.random ? Math.random() : 1) * u.particles.size.value, u.particles.size.anim.enable && (this.size_status = !1, this.vs = u.particles.size.anim.speed / 100, u.particles.size.anim.sync || (this.vs = this.vs * Math.random())), this.x = a ? a.x : Math.random() * u.canvas.w, this.y = a ? a.y : Math.random() * u.canvas.h, this.x > u.canvas.w - 2 * this.radius ? this.x = this.x - this.radius : this.x < 2 * this.radius && (this.x = this.x + this.radius), this.y > u.canvas.h - 2 * this.radius ? this.y = this.y - this.radius : this.y < 2 * this.radius && (this.y = this.y + this.radius), u.particles.move.bounce && u.fn.vendors.checkOverlap(this, a), this.color = {}, "object" == typeof e.value)
            if (e.value instanceof Array) {
                var i = e.value[Math.floor(Math.random() * u.particles.color.value.length)];
                this.color.rgb = hexToRgb(i)
            } else
                null != e.value.r && null != e.value.g && null != e.value.b && (this.color.rgb = {
                        r: e.value.r,
                        g: e.value.g,
                        b: e.value.b
                    }), null != e.value.h && null != e.value.s && null != e.value.l && (this.color.hsl = {
                        h: e.value.h,
                        s: e.value.s,
                        l: e.value.l
                    });
        else
            "random" == e.value ? this.color.rgb = {
                r: Math.floor(256 * Math.random()) + 0,
                g: Math.floor(256 * Math.random()) + 0,
                b: Math.floor(256 * Math.random()) + 0
            }
         : "string" == typeof e.value && (this.color = e, this.color.rgb = hexToRgb(this.color.value));
        this.opacity = (u.particles.opacity.random ? Math.random() : 1) * u.particles.opacity.value,
        u.particles.opacity.anim.enable && (this.opacity_status = !1, this.vo = u.particles.opacity.anim.speed / 100, u.particles.opacity.anim.sync || (this.vo = this.vo * Math.random()));
        var n = {};
        switch (u.particles.move.direction) {
        case "top":
            n = {
                x: 0,
                y: -1
            };
            break;
        case "top-right":
            n = {
                x: .5,
                y:  - .5
            };
            break;
        case "right":
            n = {
                x: 1,
                y: -0
            };
            break;
        case "bottom-right":
            n = {
                x: .5,
                y: .5
            };
            break;
        case "bottom":
            n = {
                x: 0,
                y: 1
            };
            break;
        case "bottom-left":
            n = {
                x:  - .5,
                y: 1
            };
            break;
        case "left":
            n = {
                x: -1,
                y: 0
            };
            break;
        case "top-left":
            n = {
                x:  - .5,
                y:  - .5
            };
            break;
        default:
            n = {
                x: 0,
                y: 0
            }
        }
        u.particles.move.straight ? (this.vx = n.x, this.vy = n.y, u.particles.move.random && (this.vx = this.vx * Math.random(), this.vy = this.vy * Math.random())) : (this.vx = n.x + Math.random() - .5, this.vy = n.y + Math.random() - .5),
        this.vx_i = this.vx,
        this.vy_i = this.vy;
        var s = u.particles.shape.type;
        if ("object" == typeof s) {
            if (s instanceof Array) {
                var r = s[Math.floor(Math.random() * s.length)];
                this.shape = r
            }
        } else
            this.shape = s;
        if ("image" == this.shape) {
            var c = u.particles.shape;
            this.img = {
                src: c.image.src,
                ratio: c.image.width / c.image.height
            },
            this.img.ratio || (this.img.ratio = 1),
            "svg" == u.tmp.img_type && null != u.tmp.source_svg && (u.fn.vendors.createSvgImg(this), u.tmp.pushing && (this.img.loaded = !1))
        }
    },
    u.fn.particle.prototype.draw = function () {
        var e = this;
        if (null != e.radius_bubble)
            var t = e.radius_bubble;
        else
            t = e.radius;
        if (null != e.opacity_bubble)
            var a = e.opacity_bubble;
        else
            a = e.opacity;
        if (e.color.rgb)
            var i = "rgba(" + e.color.rgb.r + "," + e.color.rgb.g + "," + e.color.rgb.b + "," + a + ")";
        else
            i = "hsla(" + e.color.hsl.h + "," + e.color.hsl.s + "%," + e.color.hsl.l + "%," + a + ")";
        switch (u.canvas.ctx.fillStyle = i, u.canvas.ctx.beginPath(), e.shape) {
        case "circle":
            u.canvas.ctx.arc(e.x, e.y, t, 0, 2 * Math.PI, !1);
            break;
        case "edge":
            u.canvas.ctx.rect(e.x - t, e.y - t, 2 * t, 2 * t);
            break;
        case "triangle":
            u.fn.vendors.drawShape(u.canvas.ctx, e.x - t, e.y + t / 1.66, 2 * t, 3, 2);
            break;
        case "polygon":
            u.fn.vendors.drawShape(u.canvas.ctx, e.x - t / (u.particles.shape.polygon.nb_sides / 3.5), e.y - t / .76, 2.66 * t / (u.particles.shape.polygon.nb_sides / 3), u.particles.shape.polygon.nb_sides, 1);
            break;
        case "star":
            u.fn.vendors.drawShape(u.canvas.ctx, e.x - 2 * t / (u.particles.shape.polygon.nb_sides / 4), e.y - t / 1.52, 2 * t * 2.66 / (u.particles.shape.polygon.nb_sides / 3), u.particles.shape.polygon.nb_sides, 2);
            break;
        case "image":
            if ("svg" == u.tmp.img_type)
                var n = e.img.obj;
            else
                n = u.tmp.img_obj;
            n && u.canvas.ctx.drawImage(n, e.x - t, e.y - t, 2 * t, 2 * t / e.img.ratio)
        }
        u.canvas.ctx.closePath(),
        0 < u.particles.shape.stroke.width && (u.canvas.ctx.strokeStyle = u.particles.shape.stroke.color, u.canvas.ctx.lineWidth = u.particles.shape.stroke.width, u.canvas.ctx.stroke()),
        u.canvas.ctx.fill()
    },
    u.fn.particlesCreate = function () {
        for (var e = 0; e < u.particles.number.value; e++)
            u.particles.array.push(new u.fn.particle(u.particles.color, u.particles.opacity.value))
    },
    u.fn.particlesUpdate = function () {
        for (var e = 0; e < u.particles.array.length; e++) {
            var t = u.particles.array[e];
            if (u.particles.move.enable) {
                var a = u.particles.move.speed / 2;
                t.x += t.vx * a,
                t.y += t.vy * a
            }
            if (u.particles.opacity.anim.enable && (1 == t.opacity_status ? (t.opacity >= u.particles.opacity.value && (t.opacity_status = !1), t.opacity += t.vo) : (t.opacity <= u.particles.opacity.anim.opacity_min && (t.opacity_status = !0), t.opacity -= t.vo), t.opacity < 0 && (t.opacity = 0)), u.particles.size.anim.enable && (1 == t.size_status ? (t.radius >= u.particles.size.value && (t.size_status = !1), t.radius += t.vs) : (t.radius <= u.particles.size.anim.size_min && (t.size_status = !0), t.radius -= t.vs), t.radius < 0 && (t.radius = 0)), "bounce" == u.particles.move.out_mode)
                var i = {
                    x_left: t.radius,
                    x_right: u.canvas.w,
                    y_top: t.radius,
                    y_bottom: u.canvas.h
                };
            else
                i = {
                    x_left: -t.radius,
                    x_right: u.canvas.w + t.radius,
                    y_top: -t.radius,
                    y_bottom: u.canvas.h + t.radius
                };
            switch (t.x - t.radius > u.canvas.w ? (t.x = i.x_left, t.y = Math.random() * u.canvas.h) : t.x + t.radius < 0 && (t.x = i.x_right, t.y = Math.random() * u.canvas.h), t.y - t.radius > u.canvas.h ? (t.y = i.y_top, t.x = Math.random() * u.canvas.w) : t.y + t.radius < 0 && (t.y = i.y_bottom, t.x = Math.random() * u.canvas.w), u.particles.move.out_mode) {
            case "bounce":
                t.x + t.radius > u.canvas.w ? t.vx = -t.vx : t.x - t.radius < 0 && (t.vx = -t.vx),
                t.y + t.radius > u.canvas.h ? t.vy = -t.vy : t.y - t.radius < 0 && (t.vy = -t.vy)
            }
            if (isInArray("grab", u.interactivity.events.onhover.mode) && u.fn.modes.grabParticle(t), (isInArray("bubble", u.interactivity.events.onhover.mode) || isInArray("bubble", u.interactivity.events.onclick.mode)) && u.fn.modes.bubbleParticle(t), (isInArray("repulse", u.interactivity.events.onhover.mode) || isInArray("repulse", u.interactivity.events.onclick.mode)) && u.fn.modes.repulseParticle(t), u.particles.line_linked.enable || u.particles.move.attract.enable)
                for (var n = e + 1; n < u.particles.array.length; n++) {
                    var s = u.particles.array[n];
                    u.particles.line_linked.enable && u.fn.interact.linkParticles(t, s),
                    u.particles.move.attract.enable && u.fn.interact.attractParticles(t, s),
                    u.particles.move.bounce && u.fn.interact.bounceParticles(t, s)
                }
        }
    },
    u.fn.particlesDraw = function () {
        u.canvas.ctx.clearRect(0, 0, u.canvas.w, u.canvas.h),
        u.fn.particlesUpdate();
        for (var e = 0; e < u.particles.array.length; e++) {
            u.particles.array[e].draw()
        }
    },
    u.fn.particlesEmpty = function () {
        u.particles.array = []
    },
    u.fn.particlesRefresh = function () {
        cancelRequestAnimFrame(u.fn.checkAnimFrame),
        cancelRequestAnimFrame(u.fn.drawAnimFrame),
        u.tmp.source_svg = void 0,
        u.tmp.img_obj = void 0,
        u.tmp.count_svg = 0,
        u.fn.particlesEmpty(),
        u.fn.canvasClear(),
        u.fn.vendors.start()
    },
    u.fn.interact.linkParticles = function (e, t) {
        var a = e.x - t.x,
        i = e.y - t.y,
        n = Math.sqrt(a * a + i * i);
        if (n <= u.particles.line_linked.distance) {
            var s = u.particles.line_linked.opacity - n / (1 / u.particles.line_linked.opacity) / u.particles.line_linked.distance;
            if (0 < s) {
                var r = u.particles.line_linked.color_rgb_line;
                u.canvas.ctx.strokeStyle = "rgba(" + r.r + "," + r.g + "," + r.b + "," + s + ")",
                u.canvas.ctx.lineWidth = u.particles.line_linked.width,
                u.canvas.ctx.beginPath(),
                u.canvas.ctx.moveTo(e.x, e.y),
                u.canvas.ctx.lineTo(t.x, t.y),
                u.canvas.ctx.stroke(),
                u.canvas.ctx.closePath()
            }
        }
    },
    u.fn.interact.attractParticles = function (e, t) {
        var a = e.x - t.x,
        i = e.y - t.y;
        if (Math.sqrt(a * a + i * i) <= u.particles.line_linked.distance) {
            var n = a / (1e3 * u.particles.move.attract.rotateX),
            s = i / (1e3 * u.particles.move.attract.rotateY);
            e.vx -= n,
            e.vy -= s,
            t.vx += n,
            t.vy += s
        }
    },
    u.fn.interact.bounceParticles = function (e, t) {
        var a = e.x - t.x,
        i = e.y - t.y;
        Math.sqrt(a * a + i * i) <= e.radius + t.radius && (e.vx = -e.vx, e.vy = -e.vy, t.vx = -t.vx, t.vy = -t.vy)
    },
    u.fn.modes.pushParticles = function (e, t) {
        u.tmp.pushing = !0;
        for (var a = 0; a < e; a++)
            u.particles.array.push(new u.fn.particle(u.particles.color, u.particles.opacity.value, {
                    x: t ? t.pos_x : Math.random() * u.canvas.w,
                    y: t ? t.pos_y : Math.random() * u.canvas.h
                })), a == e - 1 && (u.particles.move.enable || u.fn.particlesDraw(), u.tmp.pushing = !1)
    },
    u.fn.modes.removeParticles = function (e) {
        u.particles.array.splice(0, e),
        u.particles.move.enable || u.fn.particlesDraw()
    },
    u.fn.modes.bubbleParticle = function (c) {
        function e() {
            c.opacity_bubble = c.opacity,
            c.radius_bubble = c.radius
        }
        function t(e, t, a, i, n) {
            if (e != t)
                if (u.tmp.bubble_duration_end) {
                    if (null != a)
                        r = e + (e - (i - v * (i - e) / u.interactivity.modes.bubble.duration)), "size" == n && (c.radius_bubble = r), "opacity" == n && (c.opacity_bubble = r)
                } else if (l <= u.interactivity.modes.bubble.distance) {
                    if (null != a)
                        var s = a;
                    else
                        s = i;
                    if (s != e) {
                        var r = i - v * (i - e) / u.interactivity.modes.bubble.duration;
                        "size" == n && (c.radius_bubble = r),
                        "opacity" == n && (c.opacity_bubble = r)
                    }
                } else
                    "size" == n && (c.radius_bubble = void 0), "opacity" == n && (c.opacity_bubble = void 0)
        }
        if (u.interactivity.events.onhover.enable && isInArray("bubble", u.interactivity.events.onhover.mode)) {
            var a = c.x - u.interactivity.mouse.pos_x,
            i = c.y - u.interactivity.mouse.pos_y,
            n = 1 - (l = Math.sqrt(a * a + i * i)) / u.interactivity.modes.bubble.distance;
            if (l <= u.interactivity.modes.bubble.distance) {
                if (0 <= n && "mousemove" == u.interactivity.status) {
                    if (u.interactivity.modes.bubble.size != u.particles.size.value)
                        if (u.interactivity.modes.bubble.size > u.particles.size.value) {
                            0 <= (r = c.radius + u.interactivity.modes.bubble.size * n) && (c.radius_bubble = r)
                        } else {
                            var s = c.radius - u.interactivity.modes.bubble.size,
                            r = c.radius - s * n;
                            c.radius_bubble = 0 < r ? r : 0
                        }
                    if (u.interactivity.modes.bubble.opacity != u.particles.opacity.value)
                        if (u.interactivity.modes.bubble.opacity > u.particles.opacity.value) {
                            (o = u.interactivity.modes.bubble.opacity * n) > c.opacity && o <= u.interactivity.modes.bubble.opacity && (c.opacity_bubble = o)
                        } else {
                            var o;
                            (o = c.opacity - (u.particles.opacity.value - u.interactivity.modes.bubble.opacity) * n) < c.opacity && o >= u.interactivity.modes.bubble.opacity && (c.opacity_bubble = o)
                        }
                }
            } else
                e();
            "mouseleave" == u.interactivity.status && e()
        } else if (u.interactivity.events.onclick.enable && isInArray("bubble", u.interactivity.events.onclick.mode)) {
            if (u.tmp.bubble_clicking) {
                a = c.x - u.interactivity.mouse.click_pos_x,
                i = c.y - u.interactivity.mouse.click_pos_y;
                var l = Math.sqrt(a * a + i * i),
                v = ((new Date).getTime() - u.interactivity.mouse.click_time) / 1e3;
                v > u.interactivity.modes.bubble.duration && (u.tmp.bubble_duration_end = !0),
                v > 2 * u.interactivity.modes.bubble.duration && (u.tmp.bubble_clicking = !1, u.tmp.bubble_duration_end = !1)
            }
            u.tmp.bubble_clicking && (t(u.interactivity.modes.bubble.size, u.particles.size.value, c.radius_bubble, c.radius, "size"), t(u.interactivity.modes.bubble.opacity, u.particles.opacity.value, c.opacity_bubble, c.opacity, "opacity"))
        }
    },
    u.fn.modes.repulseParticle = function (i) {
        if (u.interactivity.events.onhover.enable && isInArray("repulse", u.interactivity.events.onhover.mode) && "mousemove" == u.interactivity.status) {
            var e = i.x - u.interactivity.mouse.pos_x,
            t = i.y - u.interactivity.mouse.pos_y,
            a = Math.sqrt(e * e + t * t),
            n = e / a,
            s = t / a,
            r = clamp(1 / (o = u.interactivity.modes.repulse.distance) * (-1 * Math.pow(a / o, 2) + 1) * o * 100, 0, 50),
            c = {
                x: i.x + n * r,
                y: i.y + s * r
            };
            "bounce" == u.particles.move.out_mode ? (0 < c.x - i.radius && c.x + i.radius < u.canvas.w && (i.x = c.x), 0 < c.y - i.radius && c.y + i.radius < u.canvas.h && (i.y = c.y)) : (i.x = c.x, i.y = c.y)
        } else if (u.interactivity.events.onclick.enable && isInArray("repulse", u.interactivity.events.onclick.mode))
            if (u.tmp.repulse_finish || (u.tmp.repulse_count++, u.tmp.repulse_count == u.particles.array.length && (u.tmp.repulse_finish = !0)), u.tmp.repulse_clicking) {
                var o = Math.pow(u.interactivity.modes.repulse.distance / 6, 3),
                l = u.interactivity.mouse.click_pos_x - i.x,
                v = u.interactivity.mouse.click_pos_y - i.y,
                p = l * l + v * v,
                d = -o / p * 1;
                p <= o && function () {
                    var e = Math.atan2(v, l);
                    if (i.vx = d * Math.cos(e), i.vy = d * Math.sin(e), "bounce" == u.particles.move.out_mode) {
                        var t = i.x + i.vx,
                        a = i.y + i.vy;
                        t + i.radius > u.canvas.w ? i.vx = -i.vx : t - i.radius < 0 && (i.vx = -i.vx),
                        a + i.radius > u.canvas.h ? i.vy = -i.vy : a - i.radius < 0 && (i.vy = -i.vy)
                    }
                }
                ()
            } else
                0 == u.tmp.repulse_clicking && (i.vx = i.vx_i, i.vy = i.vy_i)
    },
    u.fn.modes.grabParticle = function (e) {
        if (u.interactivity.events.onhover.enable && "mousemove" == u.interactivity.status) {
            var t = e.x - u.interactivity.mouse.pos_x,
            a = e.y - u.interactivity.mouse.pos_y,
            i = Math.sqrt(t * t + a * a);
            if (i <= u.interactivity.modes.grab.distance) {
                var n = u.interactivity.modes.grab.line_linked.opacity - i / (1 / u.interactivity.modes.grab.line_linked.opacity) / u.interactivity.modes.grab.distance;
                if (0 < n) {
                    var s = u.particles.line_linked.color_rgb_line;
                    u.canvas.ctx.strokeStyle = "rgba(" + s.r + "," + s.g + "," + s.b + "," + n + ")",
                    u.canvas.ctx.lineWidth = u.particles.line_linked.width,
                    u.canvas.ctx.beginPath(),
                    u.canvas.ctx.moveTo(e.x, e.y),
                    u.canvas.ctx.lineTo(u.interactivity.mouse.pos_x, u.interactivity.mouse.pos_y),
                    u.canvas.ctx.stroke(),
                    u.canvas.ctx.closePath()
                }
            }
        }
    },
    u.fn.vendors.eventsListeners = function () {
        "window" == u.interactivity.detect_on ? u.interactivity.el = window : u.interactivity.el = u.canvas.el,
        (u.interactivity.events.onhover.enable || u.interactivity.events.onclick.enable) && (u.interactivity.el.addEventListener("mousemove", function (e) {
                if (u.interactivity.el == window)
                    var t = e.clientX, a = e.clientY;
                else
                    t = e.offsetX || e.clientX, a = e.offsetY || e.clientY;
                u.interactivity.mouse.pos_x = t,
                u.interactivity.mouse.pos_y = a,
                u.tmp.retina && (u.interactivity.mouse.pos_x *= u.canvas.pxratio, u.interactivity.mouse.pos_y *= u.canvas.pxratio),
                u.interactivity.status = "mousemove"
            }), u.interactivity.el.addEventListener("mouseleave", function (e) {
                u.interactivity.mouse.pos_x = null,
                u.interactivity.mouse.pos_y = null,
                u.interactivity.status = "mouseleave"
            })),
        u.interactivity.events.onclick.enable && u.interactivity.el.addEventListener("click", function () {
            if (u.interactivity.mouse.click_pos_x = u.interactivity.mouse.pos_x, u.interactivity.mouse.click_pos_y = u.interactivity.mouse.pos_y, u.interactivity.mouse.click_time = (new Date).getTime(), u.interactivity.events.onclick.enable)
                switch (u.interactivity.events.onclick.mode) {
                case "push":
                    u.particles.move.enable ? u.fn.modes.pushParticles(u.interactivity.modes.push.particles_nb, u.interactivity.mouse) : 1 == u.interactivity.modes.push.particles_nb ? u.fn.modes.pushParticles(u.interactivity.modes.push.particles_nb, u.interactivity.mouse) : 1 < u.interactivity.modes.push.particles_nb && u.fn.modes.pushParticles(u.interactivity.modes.push.particles_nb);
                    break;
                case "remove":
                    u.fn.modes.removeParticles(u.interactivity.modes.remove.particles_nb);
                    break;
                case "bubble":
                    u.tmp.bubble_clicking = !0;
                    break;
                case "repulse":
                    u.tmp.repulse_clicking = !0,
                    u.tmp.repulse_count = 0,
                    u.tmp.repulse_finish = !1,
                    setTimeout(function () {
                        u.tmp.repulse_clicking = !1
                    }, 1e3 * u.interactivity.modes.repulse.duration)
                }
        })
    },
    u.fn.vendors.densityAutoParticles = function () {
        if (u.particles.number.density.enable) {
            var e = u.canvas.el.width * u.canvas.el.height / 1e3;
            u.tmp.retina && (e /= 2 * u.canvas.pxratio);
            var t = e * u.particles.number.value / u.particles.number.density.value_area,
            a = u.particles.array.length - t;
            a < 0 ? u.fn.modes.pushParticles(Math.abs(a)) : u.fn.modes.removeParticles(a)
        }
    },
    u.fn.vendors.checkOverlap = function (e, t) {
        for (var a = 0; a < u.particles.array.length; a++) {
            var i = u.particles.array[a],
            n = e.x - i.x,
            s = e.y - i.y;
            Math.sqrt(n * n + s * s) <= e.radius + i.radius && (e.x = t ? t.x : Math.random() * u.canvas.w, e.y = t ? t.y : Math.random() * u.canvas.h, u.fn.vendors.checkOverlap(e))
        }
    },
    u.fn.vendors.createSvgImg = function (s) {
        var e = u.tmp.source_svg.replace(/#([0-9A-F]{3,6})/gi, function (e, t, a, i) {
            if (s.color.rgb)
                var n = "rgba(" + s.color.rgb.r + "," + s.color.rgb.g + "," + s.color.rgb.b + "," + s.opacity + ")";
            else
                n = "hsla(" + s.color.hsl.h + "," + s.color.hsl.s + "%," + s.color.hsl.l + "%," + s.opacity + ")";
            return n
        }),
        t = new Blob([e], {
            type: "image/svg+xml;charset=utf-8"
        }),
        a = window.URL || window.webkitURL || window,
        i = a.createObjectURL(t),
        n = new Image;
        n.addEventListener("load", function () {
            s.img.obj = n,
            s.img.loaded = !0,
            a.revokeObjectURL(i),
            u.tmp.count_svg++
        }),
        n.src = i
    },
    u.fn.vendors.destroypJS = function () {
        cancelAnimationFrame(u.fn.drawAnimFrame),
        a.remove(),
        pJSDom = null
    },
    u.fn.vendors.drawShape = function (e, t, a, i, n, s) {
        var r = n * s,
        c = n / s,
        o = 180 * (c - 2) / c,
        l = Math.PI - Math.PI * o / 180;
        e.save(),
        e.beginPath(),
        e.translate(t, a),
        e.moveTo(0, 0);
        for (var v = 0; v < r; v++)
            e.lineTo(i, 0), e.translate(i, 0), e.rotate(l);
        e.fill(),
        e.restore()
    },
    u.fn.vendors.exportImg = function () {
        window.open(u.canvas.el.toDataURL("image/png"), "_blank")
    },
    u.fn.vendors.loadImg = function (e) {
        if (u.tmp.img_error = void 0, "" != u.particles.shape.image.src)
            if ("svg" == e) {
                var t = new XMLHttpRequest;
                t.open("GET", u.particles.shape.image.src),
                t.onreadystatechange = function (e) {
                    4 == t.readyState && (200 == t.status ? (u.tmp.source_svg = e.currentTarget.response, u.fn.vendors.checkBeforeDraw()) : (console.log("Error pJS - Image not found"), u.tmp.img_error = !0))
                },
                t.send()
            } else {
                var a = new Image;
                a.addEventListener("load", function () {
                    u.tmp.img_obj = a,
                    u.fn.vendors.checkBeforeDraw()
                }),
                a.src = u.particles.shape.image.src
            }
        else
            console.log("Error pJS - No image.src"), u.tmp.img_error = !0
    },
    u.fn.vendors.draw = function () {
        "image" == u.particles.shape.type ? "svg" == u.tmp.img_type ? u.tmp.count_svg >= u.particles.number.value ? (u.fn.particlesDraw(), u.particles.move.enable ? u.fn.drawAnimFrame = requestAnimFrame(u.fn.vendors.draw) : cancelRequestAnimFrame(u.fn.drawAnimFrame)) : u.tmp.img_error || (u.fn.drawAnimFrame = requestAnimFrame(u.fn.vendors.draw)) : null != u.tmp.img_obj ? (u.fn.particlesDraw(), u.particles.move.enable ? u.fn.drawAnimFrame = requestAnimFrame(u.fn.vendors.draw) : cancelRequestAnimFrame(u.fn.drawAnimFrame)) : u.tmp.img_error || (u.fn.drawAnimFrame = requestAnimFrame(u.fn.vendors.draw)) : (u.fn.particlesDraw(), u.particles.move.enable ? u.fn.drawAnimFrame = requestAnimFrame(u.fn.vendors.draw) : cancelRequestAnimFrame(u.fn.drawAnimFrame))
    },
    u.fn.vendors.checkBeforeDraw = function () {
        "image" == u.particles.shape.type ? "svg" == u.tmp.img_type && null == u.tmp.source_svg ? u.tmp.checkAnimFrame = requestAnimFrame(check) : (cancelRequestAnimFrame(u.tmp.checkAnimFrame), u.tmp.img_error || (u.fn.vendors.init(), u.fn.vendors.draw())) : (u.fn.vendors.init(), u.fn.vendors.draw())
    },
    u.fn.vendors.init = function () {
        u.fn.retinaInit(),
        u.fn.canvasInit(),
        u.fn.canvasSize(),
        u.fn.canvasPaint(),
        u.fn.particlesCreate(),
        u.fn.vendors.densityAutoParticles(),
        u.particles.line_linked.color_rgb_line = hexToRgb(u.particles.line_linked.color)
    },
    u.fn.vendors.start = function () {
        isInArray("image", u.particles.shape.type) ? (u.tmp.img_type = u.particles.shape.image.src.substr(u.particles.shape.image.src.length - 3), u.fn.vendors.loadImg(u.tmp.img_type)) : u.fn.vendors.checkBeforeDraw()
    },
    u.fn.vendors.eventsListeners(),
    u.fn.vendors.start()
};
Object.deepExtend = function (e, t) {
    for (var a in t)
        t[a] && t[a].constructor && t[a].constructor === Object ? (e[a] = e[a] || {}, arguments.callee(e[a], t[a])) : e[a] = t[a];
    return e
}, window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {
    window.setTimeout(e, 1e3 / 60)
}, window.cancelRequestAnimFrame = window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || clearTimeout, window.pJSDom = [], window.particlesJS = function (e, t) {
    "string" != typeof e && (t = e, e = "particles-js"),
    e || (e = "particles-js");
    var a = document.getElementById(e),
    i = "particles-js-canvas-el",
    n = a.getElementsByClassName(i);
    if (n.length)
        for (; 0 < n.length; )
            a.removeChild(n[0]);
    var s = document.createElement("canvas");
    s.className = i,
    s.style.width = "100%",
    s.style.height = "100%",
    null != document.getElementById(e).appendChild(s) && pJSDom.push(new pJS(e, t))
}, window.particlesJS.load = function (a, e, i) {
    var n = new XMLHttpRequest;
    n.open("GET", e),
    n.onreadystatechange = function (e) {
        if (4 == n.readyState)
            if (200 == n.status) {
                var t = JSON.parse(e.currentTarget.response);
                window.particlesJS(a, t),
                i && i()
            } else
                console.log("Error pJS - XMLHttpRequest status: " + n.status), console.log("Error pJS - File config not found")
    },
    n.send()
};
